#!/usr/bin/env bash

# Transfer files from a remote device via SCP.
#
# Description:
#
# The IP of the device is provided by the environment variable DEVICE_IP,
# which must be set. The user name on the remote device is `ubuntu`
# by default, unless provided by the environment variable DEVICE_USER.
#
# If provided, DEVICE_PWD can be used for password-based authentication,
# otherwise it is expected to have set up authorization keys first.
#
# The last argument provided is considered to be the "target", i.e. where
# on the local device the file(s) will be copied.
#
# The source(s) can start with `:` (as is also the case with programs like
# `scp`) to explicitly denote a source on the remote device. 
#
# This script sources `defs/set_ssh_options` to set SSH_OPTS.
# This script soures `defs/check_for_device_ip` to check that DEVICE_IP is set.
#
# Return value:
#
# 0 if the copy operation is successful or >0 in case of an error.

usage() {
    echo "Usage: $(basename ${BASH_SOURCE[0]}) [:<source>]+ <target>"
}

if [ $# -lt 2 ]; then
    usage
    echo "Error: <source> and/or <target> not specified"
    exit 1
fi

check_for_device_ip || exit 1
source "$(dirname ${BASH_SOURCE[0]})/defs/ssh_options"

# The target is the last argument
TARGET=${@: -1}

# Extract the sources (remove the target) from the argument list...
SOURCES_ARRAY=("${@:1:$#-1}")
# ... and prefix them appropriately
PREFIX=${DEVICE_USER:-ubuntu}@${DEVICE_IP}
SOURCES=()
for SOURCE in "${SOURCES_ARRAY[@]}"; do
    [[ ${SOURCE:0:1} != ":" ]] && SOURCE=":${SOURCE}"
    SOURCES+=("${PREFIX}${SOURCE}")
done
SOURCES="${SOURCES[@]}"

if [ -n "$DEVICE_PWD" ]; then
    SSHPASS="sshpass -p $DEVICE_PWD"
else
    SSHPASS=""
fi

$SSHPASS scp $SSH_OPTS $SOURCES $TARGET
