#!/usr/bin/env bash
#
# Wait until package operations (apt, dpkg) are complete.
#
# See `check_for_packages_complete` (which is repeatedly called here)
# for details.
#
# There is a global timeout on the wait operation. In the case
# of a timeout, all processes relevant to package handling (apt,
# apt-get, dpkg) are killed.
#
# Return value:
#
# 0 if `check_for_packages_complete` is successful, or a timeout has occurred
# 1 if `check_for_packages_complete` cannot be executed or is unsuccesful on the last retry

usage() {
    echo "Usage: $(basename ${BASH_SOURCE[0]}) [--no-files-check]"
}

NO_FILES_CHECK=""
TIMEOUT="30m"
DELAY=10
while [[ "$#" -gt 0 ]]; do
    case $1 in
        --no-files-check)
            NO_FILES_CHECK=$1
            ;;
        --timeout)
            TIMEOUT=$2
            shift
            ;;
        --delay)
            DELAY=$2
            shift
            ;;
        *)
            usage
            echo "Error: Invalid argument $1"
            exit 1
            ;;
    esac
    shift
done

timeout "$TIMEOUT" retry --delay "$DELAY" -- check_for_packages_complete $NO_FILES_CHECK

result=$?
if [ $result -ge 124 ]; then
    # the `retry` has timed out
    echo "$(basename ${BASH_SOURCE[0]}) has timed out".
    echo "Killing apt, apt-get, and dpkg processes:"
    sudo pkill --echo -x "apt|apt-get|dpkg"
    # indicate success:
    # since the processes have been killed, package handling is no longer ongoing
    exit 0
fi
exit $result
