#!/usr/bin/env python3
#
# Copyright 2024 Canonical Ltd.
#
# Fetch the manifest for a given machine from C3
#
# Usage:
#     `fetch_manifest <CID> <MACHINE_SECURE_ID>`

from argparse import ArgumentParser
import configparser
import requests


# This is the manifest that all machines will use if we cannot find
# one specifically created for that machine
fallback_manifest_raw = """[manifest]
com.canonical.certification::has_bt_smart = false
com.canonical.certification::has_camera = true
com.canonical.certification::has_card_reader = true
com.canonical.certification::has_ethernet_adapter = true
com.canonical.certification::has_thunderbolt = false
com.canonical.certification::has_thunderbolt3 = false
com.canonical.certification::has_touchscreen = false
com.canonical.certification::has_tpm2_chip = false
com.canonical.certification::has_usb_storage = true
com.canonical.certification::has_usb_type_c = false
com.canonical.certification::has_wlan_adapter = true
"""

fallback_manifest_config = configparser.ConfigParser(delimiters=("=",))
fallback_manifest_config.read_string(fallback_manifest_raw)


def parse_json(manifest_json):
    """
    Given an manifest json file, parse it as a format suitable for the Checkbox launcher file
    """
    manifest_config = configparser.ConfigParser(delimiters=("=",))
    manifest_config["manifest"] = {}
    for key, value in manifest_json.items():
        manifest_config["manifest"][key] = str(value).lower()
    return manifest_config


def fetch_manifest():
    parser = ArgumentParser(
        prog="fetch_manifest",
        description="Helper script to fetch the manifest for a given machine from C3",
    )
    parser.add_argument("cid", help="Canonical ID of the machine", type=str)
    parser.add_argument("secure_id", help="Secure ID of the machine", type=str)
    parser.add_argument(
        "--manifest_file",
        help="File name to write the manifest to",
        default="manifest_conf",
        type=str,
    )
    args = parser.parse_args()

    print("Fetching Manifest from C3")
    response = requests.get(
        f"https://certification.canonical.com/api/v2/machines/{args.cid}/manifest?secure_id={args.secure_id}"
    )
    if response.status_code == 200:
        print("Found manifest")
        manifest_config = parse_json(response.json())
    else:
        print("Manifest not found, using default")
        manifest_config = fallback_manifest_config

    with open(args.manifest_file, "w") as configfile:
        manifest_config.write(configfile)


if __name__ == "__main__":
    fetch_manifest()
