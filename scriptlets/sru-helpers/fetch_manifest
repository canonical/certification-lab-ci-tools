#!/usr/bin/env python3
#
# Copyright 2024 Canonical Ltd.
#
# Fetch the manifest for a given machine from C3
# Exit codes: 0 - Success, 1 - Failure to find manifest
#
# Usage:
#     `fetch_manifest <CID> <MACHINE_SECURE_ID>`

from argparse import ArgumentParser, Namespace
from configparser import ConfigParser, ParsingError
from pathlib import Path
import sys

import requests


def parse_args() -> Namespace:
    parser = ArgumentParser(
        prog="fetch_manifest",
        description="Fetch the manifest for a given machine from C3",
    )
    parser.add_argument("cid", help="Canonical ID of the machine", type=str)
    parser.add_argument("secure_id", help="Secure ID of the machine", type=str)
    parser.add_argument(
        "--output",
        help="File name to write the manifest to",
        default="manifest_conf",
        type=Path,
    )
    parser.add_argument(
        "--default",
        help="Path to default manifest, if one cannot be fetched",
        type=Path,
    )
    return parser.parse_args()


def fetch_c3_manifest(cid: str, secure_id: str, output: Path):
    """
    Fetch manifest for `cid` from C3 and write it to the `output` file
    """
    # request the manifest from C3
    response = requests.get(
        "https://certification.canonical.com/api/v2/machines/"
        f"{cid}/manifest?secure_id={secure_id}"
    )
    response.raise_for_status()
    # convert the manifest JSON from the response into
    # an INI-style configuration and write it to a file
    manifest_config = ConfigParser(delimiters=("=",))
    manifest_config.optionxform = str
    manifest_config["manifest"] = response.json()
    with open(output, "w") as manifest_file:
        manifest_config.write(manifest_file)


def fetch_default_manifest(default: Path, output: Path):
    """
    Fetch a `default` manifest and write it to the `output` file

    The manifest is not copied but instead read into a ConfigParser
    and written back to the `output` file, for safety/validation.
    """
    manifest_config = ConfigParser(delimiters=("=",))
    manifest_config.optionxform = str
    with open(default, "r") as manifest_file:
        manifest_config.read_file(manifest_file)
    with open(output, "w") as manifest_file:
        manifest_config.write(manifest_file)


def main() -> int:
    args = parse_args()

    print(f"Fetching manifest for {args.cid} from C3")
    try:
        fetch_c3_manifest(args.cid, args.secure_id, args.output)
        print(f"Fetched manifest for {args.cid} into '{args.output}'")
        return 0
    except requests.RequestException as error:
        print(f"Could not fetch manifest for {args.cid}")
        print(f"{type(error).__name__}: {error}")
        if not args.default:
            # no fetched manifest, no default manifest specified
            return 1

    # default manifest specified, fetch that instead
    print(f"Retrieving default manifest from '{args.default}'")
    try:
        fetch_default_manifest(args.default, args.output)
        print(f"Fetched default manifest into '{args.output}'")
        return 0
    except (ParsingError, FileNotFoundError) as error:
        print(f"Could not retrieve default manifest for {args.cid}")
        print(f"{type(error).__name__}: {error}")
        return 1


if __name__ == "__main__":
    sys.exit(main())
