#!/usr/bin/env python3
#
# Copyright 2024 Canonical Ltd.
#
# Fetch the manifest for a given machine from C3
#
# Usage:
#     `fetch_manifest <CID> <MACHINE_SECURE_ID>`

from argparse import ArgumentParser
from io import StringIO
import requests


# This is the manifest that all machines will use if we cannot find
# one specifically created for that machine
fallback_manifest = """        [manifest]
        com.canonical.certification::has_bt_smart = false
        com.canonical.certification::has_camera = true
        com.canonical.certification::has_card_reader = true
        com.canonical.certification::has_ethernet_adapter = true
        com.canonical.certification::has_thunderbolt = false
        com.canonical.certification::has_thunderbolt3 = false
        com.canonical.certification::has_touchscreen = false
        com.canonical.certification::has_tpm2_chip = false
        com.canonical.certification::has_usb_storage = true
        com.canonical.certification::has_usb_type_c = false
        com.canonical.certification::has_wlan_adapter = true
"""


def parse_json(manifest_json):
    """
    Given an manifest json file, parse it as a format suitable for the Checkbox launcher file
    """
    manifest_conf = StringIO()
    print("        [manifest]", end="\n", file=manifest_conf)
    for key, value in manifest_json.items():
        line = f"        {key} = {value}"
        print(line, end="\n", file=manifest_conf)
    return manifest_conf.getvalue()


def fetch_manifest():
    parser = ArgumentParser(
        prog="",
        description="",
    )
    parser.add_argument("cid", type=str)
    parser.add_argument("secure_id", type=str)
    args = parser.parse_args()

    print("Fetching Manifest from C3")
    response = requests.get(
        f"https://certification.canonical.com/api/v2/machines/{args.cid}/manifest?secure_id={args.secure_id}"
    )
    if response.status_code == 200:
        print("Found manifest")
        manifest_conf = parse_json(response.json())
    else:
        print("Manifest not found, using default")
        manifest_conf = fallback_manifest

    with open("manifest_conf", "w") as f:
        f.write(manifest_conf)


if __name__ == "__main__":
    fetch_manifest()
