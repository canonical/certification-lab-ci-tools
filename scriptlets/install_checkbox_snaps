#!/bin/bash

# Install Checkbox on the DUT and the agent
#
# Description:
#
# Installs Checkbox snap (runtime + frontend) on the DUT. Also installs
# Checkbox on the agent from source matching the version on the DUT
# Finally the installation on the DUT is verified to check that the machine is
# ready to run tests.
# The `risk` parameter can be either "stable", "beta", "edge" and is used for
#   both runtime and frontend
# The `frontend_name` can be any of the frontend snaps (eg. checkbox,
#   checkbox-tillamook).
# The `frontend_track` parameter can be any valid track name (eg. 22.04, uc16).
#   It is also used to appropriately install the snap (decide if a snap is
#   classic or strict)

set -e

if [[ "$#" != "3" ]]; then
  echo "Usage: $(basename ${BASH_SOURCE[0]}) risk frontend_name frontend_track"
  exit 1
fi

echo "Installing Checkbox snaps"

RISK=$1
FRONTEND_NAME=$2
FRONTEND_TRACK=$3
FRONTEND_CHANNEL="$FRONTEND_TRACK/$RISK"

# the runtime name is "checkboxYY";
# YY is extracted from the "base" field of the front-end snap, which should be coreYY;
# the final "grep ." will cause this script to exit if there's no match
RUNTIME_NAME="checkbox$(_run "snap info --verbose $FRONTEND_NAME" | sed -n 's/^base:\s*core\([0-9]\{2\}\)$/\1/p' | grep .)"
RUNTIME_CHANNEL="latest/$RISK"

echo "Installing runtime snap: $RUNTIME_NAME from $RUNTIME_CHANNEL"
_run sudo snap install --no-wait $RUNTIME_NAME --channel=$RUNTIME_CHANNEL
wait_for_snap_changes

# strict snaps need a different install flag and the connections to be made.
# Checkbox Frontend snaps are strict on the tracks ucXX. Update
# this regex to match more if alternative frontends need this as well
[[ "$FRONTEND_TRACK" == uc* ]] && STRICT_FRONTEND=true || STRICT_FRONTEND=false

if $STRICT_FRONTEND; then
  NOTE="strict snap, using --devmode"
  EXTRA_SNAP_INSTALL_FLAG="--devmode"
else
  NOTE="classic snap, using --classic"
  EXTRA_SNAP_INSTALL_FLAG="--classic"
fi

echo "Installing front-end snap: $FRONTEND_NAME from $FRONTEND_CHANNEL ($NOTE)"
_run sudo snap install --no-wait $FRONTEND_NAME $EXTRA_SNAP_INSTALL_FLAG --channel=$FRONTEND_CHANNEL
wait_for_snap_changes
_run sudo snap set $FRONTEND_NAME agent=enabled
_run sudo snap start $FRONTEND_NAME

if $STRICT_FRONTEND; then
  # these plugs are not automatically connected but are necessary to run some
  # tests. Namely:
  set +e
  # Here we are handling results on a per-interface basis because we may not need
  # these interfaces as we may not need to run the tests they are needed for

  # Network tests
  _run sudo snap connect $FRONTEND_NAME:network-manager network-manager:service \
  || echo "Failed to connect plug. Networking (mostly wifi) tests may not work"
  # bluetooth tests
  _run sudo snap connect $FRONTEND_NAME:bluez bluez:service \
  || echo "Failed to connect plug. Bluetooth tests may not work"
  _run sudo snap connect $FRONTEND_NAME:bluetooth-control core:bluetooth-control \
  || echo "Failed to connect plug. Bluetooth tests may not work"
  set -e

  # force connect also the default plugs. This is necessary on some machines but
  # is effectively a no-op when it would not be needed
  _run sudo snap connect $FRONTEND_NAME:checkbox-runtime $RUNTIME_NAME:checkbox-runtime
  _run sudo snap connect $FRONTEND_NAME:provider-certification-client $RUNTIME_NAME:provider-certification-client
  _run sudo snap connect $FRONTEND_NAME:provider-checkbox $RUNTIME_NAME:provider-checkbox
  _run sudo snap connect $FRONTEND_NAME:provider-resource $RUNTIME_NAME:provider-resource
fi

# some versions of snapd seem to force dependencies to be stable in some situation
# but we want RISK risk, so lets force it by re-installing it
# Note: this is done twice because if snapd doesn't force the stable dependency
#       then this causes just 1 download
_run sudo snap refresh --no-wait $RUNTIME_NAME --channel=latest/$RISK
wait_for_snap_changes

# restart the service to make sure the latest version of the code is used
_run sudo snap restart $FRONTEND_NAME

export CHECKBOX_VERSION=$(_run $FRONTEND_NAME.checkbox-cli --version)
[ -z "$CHECKBOX_VERSION" ] && echo "Error: Unable to retrieve Checkbox version from device" && exit 1

echo "Installing checkbox $CHECKBOX_VERSION on the agent container from source"
install_checkbox_agent_source $CHECKBOX_VERSION

check_for_checkbox_service --debug
